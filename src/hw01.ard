-- 1. Установите arend, следуя инструкциям на странице https://arend-lang.github.io/download
--    В IDEA можно просто импортировать данный проект.

-- 2. Определите аналоги следующих функций на языке хаскелл.

\func second (_ y _ : Nat): Nat => y

\func apply (f : Nat -> Nat) (x : Nat) : Nat => f x

\func compose (f g : Nat -> Nat) (x : Nat) => f (g x)

\func flip (f : Nat -> Nat -> Nat) (x y : Nat): Nat => f y x

\func second' => flip (second 0)
{- Haskell:
   second :: Nat -> Nat -> Nat -> Nat
   second _ y _ = y

   apply :: (Nat -> Nat) -> Nat -> Nat
   apply f x = f x

   compose :: (Nat -> Nat) -> (Nat -> Nat) -> Nat -> Nat
   compose f g x = f (g x)

   flip :: (Nat -> Nat -> Nat) -> Nat -> Nat -> Nat
   flip f x y = f y x

   second' = flip (second 0)
-}

-- 3. Расставьте приоритеты функций f1, f2, f3, f4, f5 и f6 так, чтобы функция test проходила тайпчекинг.

\import lect01 \hiding (+,*)

\func f1 (x y : Nat) => x
\func f2 : Nat => 0
\func \infix 6 f3 (f : Nat -> Nat) (z : Nat) : Int => 0
\func f4 : Nat => 0
\func \infix 7 f5 => f1
\func f6 => f4

\func test => f1 f2 f3 f4 f5 f6

-- 4. Определите функцию if, аналогичную следующей функции:
{- Haskell:
   if :: Bool -> Bool -> Bool -> Bool
   if True t _ = t
   if False _ e = e
-}

\func if (cond t e : Bool) : Bool
  | true, t, _  => t
  | false, _, e => e

-- 5. Определите || через if.

\func \infixr 2 || (x y : Bool) : Bool => if x true y

-- 6. Определите возведение в степень и факториал для натуральных чисел.

\open Nat \hiding (-,div) -- Здесь лежат + и *.

\func \infixr 8 ^ (x y : Nat) : Nat \elim y
  | 0 => suc zero
  | 1 => x
  | suc (y') => (x ^ y') * x

\func fac (x : Nat) : Nat \elim x
  | zero => 1
  | suc x' => suc x' * fac x'

-- 7. Определите mod и gcd.

\func if' (cond : Bool) (t e : Nat) : Nat
  | true, t, _ => t
  | false, _, e => e

\func mod (x y : Nat) => aux x x y
  \where {
    \func aux (fuel x y : Nat) : Nat \elim fuel
      | 0 => 0
      | suc fuel => if' (x < y) x (aux fuel (x - y) y)
  }

\func testMod1 : mod 10 5 = 0 => idp
\func testMod2 : mod 10 3 = 1 => idp
\func testMod3 : mod 10 0 = 0 => idp
\func testMod4 : mod 5 10 = 5 => idp

\func gcd (x y : Nat): Nat => if' (y < x) (aux x x y) (aux y y x)
  \where {
    \func iszero (_ : Nat): Bool
      | 0 => true
      | x => false
    \func aux (fuel x y : Nat) : Nat \elim fuel
      | 0 => x
      | suc fuel => if' (iszero y) x (aux fuel y (x `mod` y))
  }

\func gcdTest1 : gcd 9 6 = 3 => idp
\func gcdTest2 : gcd 6 9 = 3 => idp
\func gcdTest3 : gcd 3 3 = 3 => idp
\func gcdTest4 : gcd 10 7 = 1 => idp
\func gcdTest5 : gcd 7 10 = 1 => idp
\func gcdTest6 : gcd 7 10 = gcd 10 7 => idp
