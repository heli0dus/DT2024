\import Data.Bool
\import Data.Or
\import Logic

\import hw01 (fac)
\import lect02 (List, cons, nil)

-- 1. Определите полиморфный tail для списков.

\func tail {A : \Type} (_ : List A) : List A
  | nil => nil
  | cons a xs => xs

-- 2. Реализуйте любой (but choose wisely) алгоритм сортировки. Функцию сравнения можно принимать в качестве аргумента.

\func sort {A : \Type} (less : A -> A -> Bool) (xs : List A) : List A \elim xs
  | nil => nil
  | cons x xs => insert less x (sort less xs)
    \where
      \func insert {A : \Type} (less : A -> A -> Bool) (x : A) (xs : List A) : List A \elim xs
        | nil => cons x nil
        | cons x' xs' => if (less x x') (cons x (cons x' xs')) (cons x' (insert less x xs'))

\func \infixl 3 < (a b : Nat) : Bool
  | 0, 0 => false
  | 0, suc b => true
  | suc a, 0 => false
  | suc a, suc b => a < b

\func \infixl 3 > (a b : Nat) : Bool
  | 0, _ => false
  | suc a, 0 => true
  | suc a, suc b => a > b

\func testSort1 : sort (<) (cons 3 (cons 1 (cons 2 nil))) = cons 1 (cons 2 (cons 3 nil)) => idp
\func testSort2 : sort (>) (cons 3 (cons 1 (cons 2 nil))) = cons 3 (cons 2 (cons 1 nil)) => idp
\func testSort3 : sort (<) (cons 1 (cons 2 (cons 3 nil))) = cons 1 (cons 2 (cons 3 nil)) => idp
\func testSort4 : sort (<) (cons 3 (cons 2 (cons 1 nil))) = cons 1 (cons 2 (cons 3 nil)) => idp
\func testSort5 : sort (<) nil = nil => idp



-- 3. Докажите ассоциативность && и ||.

\func &&-assoc (x y z : Bool) : (x and y) and z = x and (y and z)
  | false, _, _ => idp
  | true, _, _ => idp


\func ||-assoc (x y z : Bool) : (x or y) or z = x or (y or z)
  | false, _, _ => idp
  | true, _, _ => idp

-- 4. Докажите, что fac 3 равно 6.

\func fac3eq6 : fac 3 = 6 => idp

-- 5. Докажите следующие пропозициональные тавтологии (choose 2 out of 3).

-- t1 : (P and Q -> R) -> P -> Q -> R
\func t1 {P Q R : \Type} (f : \Sigma P Q -> R) (p : P) (q : Q) : R => f (p, q)

-- t2 : (P -> R) -> (Q -> R) -> P or Q -> R
\func t2 {P Q R : \Type} (f : P -> R) (g : Q -> R) (h : Or P Q) : R \elim h
  | inl a => f a
  | inr b => g b

-- t3 : ((P -> Q -> R) -> P) -> (P -> R) -> R
\func t3 {P Q R : \Type} (f : (P -> Q -> R) -> P) (g : P -> R) : R => g (f (\lam p _ => g p))
-- 6. Сформулируйте и докажите следующие пропозициональные тавтологии (choose 2 out of 3).

-- t4 : (P -> Q -> R) -> P and Q -> R
\func t4 {P Q R : \Type} (f : P -> Q -> R) (g : \Sigma P Q) : R \elim g
  | (p,q) => f p q

-- t5 : (P or Q -> P and Q) -> (P -> Q) and (Q -> P)
\func t5 {P Q : \Type} (f : Or P Q -> \Sigma P Q) : \Sigma (P -> Q) (Q -> P) =>
  (\lam p => (f (inl p)).2, \lam q => (f (inr q)).1)

-- t6 : ((((P -> Q) -> P) -> P) -> Q) -> Q
\func t6 {P Q : \Type} (f : (((P -> Q) -> P) -> P) -> Q) : Q => f (\lam g => g (\lam p => f (\lam _ => p)))

-- 7. Докажите следующие утверждения.

-- s1 : Если для любого x : Nat верно P(x), то существует x : Nat для которого P(x) верно.
\func s1 (P : Nat -> \Type) (h : \Pi (x : Nat) -> P x) : \Sigma (x : Nat) (P x) => (0, h 0)

-- s2 : Если не существует x : Nat такого, что верно P(x), то P(3) не верно.
\func s2 (P : Nat -> \Type) (h : \Sigma (x : Nat) (P x) -> Empty) : P 3 -> Empty => \lam p => h (3, p)

-- 8. Сформулируйте и докажите следующие утверждения.

-- s3 : Если для всех x : Nat верно, что P(x) влечет Q(x), и существует x : Nat для которого верно P(x), то существует x : Nat для которого верно Q(x).
\func s3 (P Q : Nat -> \Type) (h : \Pi (x : Nat) -> P x -> Q x) (g : \Sigma (x : Nat) (P x)) : \Sigma (x : Nat) (Q x) \elim g
  | (x,p) => (x, h x p)

-- s4 : Если для всех x : Nat либо не верно P(x), либо не верно Q(x), то P(3) влечет, что Q(3) не верно.
\func s4 (P Q : Nat -> \Type) (h : \Pi (x : Nat) -> Or (P x -> Empty) (Q x -> Empty)) : P 3 -> Q 3 -> Empty =>
  \lam p q => \case h 3 \with {
    | inl a => a p
    | inr b => b q
  }