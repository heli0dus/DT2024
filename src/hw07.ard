\import Data.Maybe
\import Logic
\import Meta
\import Paths
\import hw01 (gcd)
\import lect07
\open Nat(+)

-- 1. Определите функцию swap несколькими способами.

-- При помощи \cowith и доступа к полям.
\func swap {A B : \Type} (p : Pair A B) : Pair B A \cowith
  | fst_ => p.snd_
  | snd_ => p.fst_

-- При помощи \new и паттерн матчинга.
\func swap' {A B : \Type} (p : Pair A B) : Pair B A
  | (a,b) => \new Pair { | fst_ => b | snd_ => a}

-- При помощи \new и доступа к полям.
\func swap'' {A B : \Type} (p : Pair A B) : Pair B A => \new Pair { | fst_ => p.snd_ | snd_ => p.fst_}

-- 2. Докажите, что swap (swap p) = p.

\func swap-involutive {A B : \Type} (p : Pair A B) : swap (swap p) = p => idp

-- 3. Докажите, что тип PosNat 0 пустой, а тип PosNat 1 нет.

\func zero-isNotPos (p : PosNat 0) : Empty => \case p.p

\func one-isPos : PosNat 1 \cowith
  | p => ()

-- 4. Определите \record, состоящий из пар взаимно простых натуральных чисел.
--    Определите тип, состоящий из натуральных чисел, взаимно простых с 60.

\record MutPrime (p : Pair Nat Nat) (q : gcd p.fst_ p.snd_ = 1)

\func MutPrime60 (n : Nat) : \Type => MutPrime (\new Pair {| fst_ => n | snd_ => 60})

-- 5. Закончите определение класса монад. Этот класс должен содержать все монадные законы и реализовывать все поля из класса функторов.

\class Monad \extends Functor {
  | return {A : \Set} : A -> F A
  | \infixl 1 >>= {A B : \Set} : F A -> (A -> F B) -> F B
  | bind-id-left {A B : \Set} (a : A) (k : A -> F B) : (return a >>= k) = k a
  | bind-id-right {A : \Set} (m : F A) : (m >>= return) = m
  | bind-assoc {A B C : \Set} (m : F A) (k : A -> F B) (h : B -> F C) : (m >>= (\lam x => k x >>= h)) = ((m >>= k) >>= h)
  \default fmap f xs => xs >>= (\lam x => return (f x))
}
-- 6. Определите \instance Monad для Maybe.

\instance MaybeMonad : Monad Maybe
  | fmap {A B : \Set} (f : A -> B) (m : Maybe A) : Maybe B \elim m {
    | nothing => nothing
    | just a => just (f a)
  }
  | fmap-id {A : \Set} (m : Maybe A) => cases m \with {
    | nothing => idp
    | just a => idp
  }
  | fmap-comp {A B C : \Set} (f : A -> B) (g : B -> C) (x : Maybe A) => cases x \with {
    | nothing => idp
    | just a => idp
  }
  | return => just
  | >>= {A B : \Set} (m : Maybe A) (k : A -> Maybe B) : Maybe B \elim m {
    | nothing => nothing
    | just a => k a
  }
  | bind-id-left {A B : \Set} (a : A) (k : A -> Maybe B) => pmap k idp
  | bind-id-right {A : \Set} (m : Maybe A) => cases m \with {
    | nothing => idp
    | just a => idp
  }
  | bind-assoc {A B C : \Set} (m : Maybe A) (k : A -> Maybe B) (h : B -> Maybe C) => cases m \with {
    | nothing => idp
    | just a => idp
  }

-- 7. Определите \instance Monad для State и State'.

\record State (S A : \Type)
  | state : S -> \Sigma S A

\instance MondadState {S : \Set} : Monad (State S)
  | fmap {A B : \Type} (f : A -> B) (m : State S A) : State S B \cowith {
    | state => \lam s => \let (s', a) => m.state s \in (s', f a)
  }
  | fmap-id {A : \Type} (m : State S A) => idp
  | fmap-comp {A B C : \Type} (f : A -> B) (g : B -> C) (m : State S A) => idp
  | return {A : \Type} (x : A) : State S A \cowith {
    | state s => (s, x)
  }
  | >>= {A B : \Type} (m : State S A) (k : A -> State S B) : State S B \cowith {
    | state => \lam s => \let (s', a') => m.state s \in State.state {k a'} s'
  }
  | bind-id-left {A B : \Type} (a : A) (k : A -> State S B) => idp
  | bind-id-right {A : \Type} (m : State S A) => idp
  | bind-assoc {A B C : \Set} (m : State S A) (k : A -> State S B) (h : B -> State S C) => idp

\data State' (S A : \Type)
  | state' (S -> \Sigma S A)


\instance MonadState' {S : \Set} : Monad (State' S)
  | fmap {A B : \Type} (f : A -> B) (m : State' S A) : State' S B  \elim m {
    | state' s' => state' \lam s => \let (s', a) => s' s \in (s', f a)
  }
  | fmap-id {A : \Type} (m : State' S A) => cases m \with {
    | state' _x => idp
  }
  | fmap-comp {A B C : \Type} (f : A -> B) (g : B -> C) (m : State' S A) => cases m \with {
    | state' _x => idp
  }
  | return {A : \Type} (x : A) => state' \lam s => (s, x)
  | >>= {A B : \Type} (m : State' S A) (k : A -> State' S B) : State' S B \elim m {
    | state' s' => state' \lam s => \let (s'', a) => s' s \in cases (k a) \with {
      | state' st' => st' s''
    }
  }
  | bind-id-left {A B : \Type} (a : A) (k : A -> State' S B) => cases (k a) \with {
    | state' _x => idp
  }
  | bind-id-right {A : \Type} (m : State' S A) => cases m \with {
    | state' _x => idp
  }
  | bind-assoc {A B C : \Set} (m : State' S A) (k : A -> State' S B) (h : B -> State' S C) => cases (m >>= (\lam x => k x >>= h)) \with {
    | state' _x => cases (m >>= k >>= h) \with {
      | state' _x1 => pmap state' {?}
    }
  }