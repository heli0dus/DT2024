\import Data.List
\import Function.Meta
\import Paths
\import Paths.Meta
\import lect03
\open Nat(+,*)

-- 1. Чему равно fileTest (в нормальной форме)? Докажите это.

\func fileTestTest : fileTest = (17, 8, 13, 55, 18, 21) => idp

-- 2. Чему равно M5.t''' (в нормальной форме)? Докажите это.

\func M5t'''Test : M5.t''' = ((82, 42, 61, 82, 34, 42, 61, 29), 25 , (42, 29)) => idp

-- 3. Докажите ассоциативность ++.

\func ++-assoc {A : \Type} (xs ys zs : List A) : (xs ++ ys) ++ zs = xs ++ (ys ++ zs) \elim xs
  | nil => idp
  | a :: xs => pmap (\lam (x) => a :: x) (++-assoc xs ys zs)

-- 4. Докажите, что reverse (reverse xs) = xs, где reverse определен через ++.

\func reverse {A : \Type} (xs : List A) : List A
  | nil => nil
  | :: x xs => reverse xs ++ x :: nil

-- Это утверждение будет полезно для доказательства.
\func reverse++ {A : \Type} (xs ys : List A) : reverse (xs ++ ys) = reverse ys ++ reverse xs
  | nil, nil => idp
  | nil, a :: ys => rewrite ++-assoc idp
  | a :: xs, nil => rewrite reverse++ idp
  | a :: xs, a1 :: ys => rewrite ++-assoc (rewrite reverse++ (rewrite {2} ++-assoc (rewrite ++-assoc idp)))

\func reverse-isInvolutive {A : \Type} (xs : List A) : reverse (reverse xs) = xs
  | nil => idp
  | a :: xs => rewrite reverse++ (pmap (\lam x => a :: x) (reverse-isInvolutive xs))

-- 5. Докажите дистрибутивность умножения над сложением для натуральных чисел.

\func rdistr (n m k : Nat) : (m + k) * n = m * n + k * n \elim n
  | zero => idp
  | suc n => inv (+-assoc _ _ _) *> pmap (\lam x => x + k) (pmap (\lam x => x + m) (rdistr _ _ _ *> +-comm _ _) *> +-assoc _ _ _ *> +-comm _ _) *> +-assoc _ _ _

--  m * n + m + (k * n + k) = m * n + (m + k * n) + k = m * n + (k * n + m) + k = m * n + k * n + (m + k)

\func ldistr (n m k : Nat) : n * (m + k) = n * m + n * k \elim m
  | zero => idp
  | suc m => pmap (\lam x => x + n) (ldistr _ _ _ *> +-comm _ _) *> +-assoc _ _ _ *> +-comm _ _

-- 6. Определите конгруэнтность для функций двух аргументов через transport.
--    Можно использовать любые функции, определенные через transport.

\func pmap2 {A B C : \Type} (f : A -> B -> C) {a a' : A} (p : a = a') {b b' : B} (q : b = b') : f a b = f a' b' =>
  transport (\lam x => f a b = f a' x) q (transport (\lam x => f a b = f x b) p idp)

-- 7. Докажите, что transport выражается через pmap и repl и наоборот.

-- repl говорит, что если у нас есть два равных типа, то у нас есть функция из одного во второй.
-- Определите repl через transport.

\func repl {A B : \Type} (p : A = B) (a : A) : B => transport (\lam x => x) p a

-- Определите transport через repl и pmap.

\func transport' {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a) : B a' =>
  repl (pmap B p) b